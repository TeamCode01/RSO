# Generated by Django 4.2.7 on 2024-01-31 15:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import events.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('headquarters', '0025_region_code_alter_regionalheadquarter_region'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scale', models.CharField(choices=[('Отрядное', 'Отрядное'), ('Образовательное', 'Мероприятие Образовательного Штаба'), ('Городское', 'Городское'), ('Региональное', 'Региональное'), ('Окружное', 'Мероприятие Окружного Штаба'), ('Всероссийское', 'Мероприятие ЦШ')], default='Отрядное', max_length=20, verbose_name='Масштаб')),
                ('format', models.CharField(choices=[('Онлайн', 'Онлайн'), ('Оффлайн', 'Оффлайн')], default='Оффлайн', max_length=7, verbose_name='Тип мероприятия')),
                ('direction', models.CharField(choices=[('Добровольческое', 'Добровольческое'), ('Образовательное', 'Образовательное'), ('Патриотическое', 'Патриотическое'), ('Спортивное', 'Спортивное'), ('Творческое', 'Творческое')], default='Добровольческое', max_length=20, verbose_name='Масштаб мероприятия')),
                ('status', models.CharField(choices=[('Активный', 'Активный'), ('Завершенный', 'Завершенный')], default='Активный', max_length=20, verbose_name='Статус мероприятия')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('name', models.CharField(max_length=100, verbose_name='Название мероприятия')),
                ('banner', models.ImageField(blank=True, null=True, upload_to=events.utils.image_path, verbose_name='Баннер')),
                ('conference_link', models.CharField(max_length=250, verbose_name='Ссылка на конференцию')),
                ('address', models.CharField(blank=True, max_length=250, null=True, verbose_name='Адрес проведения (если мероприятие оффлайн)')),
                ('participants_number', models.PositiveIntegerField(verbose_name='Количество участников')),
                ('description', models.TextField(verbose_name='О мероприятии')),
                ('application_type', models.CharField(choices=[('Персональная', 'Персональная'), ('Групповая', 'Групповая'), ('Мультиэтапная', 'Мультиэтапная')], default='Групповая', max_length=20, verbose_name='Вид принимаемых к подаче на мероприятие заявок')),
                ('available_structural_units', models.CharField(blank=True, choices=[('Отряды', 'Отряды'), ('Образовательные штабы', 'Образовательные штабы'), ('Местные штабы', 'Местные штабы'), ('Региональные штабы', 'Региональные штабы'), ('Окружные штабы', 'Окружные штабы'), ('Центральные штабы', 'Центральные штабы')], default='Отряды', max_length=30, null=True, verbose_name='Объекты, имеющие возможность формировать групповые заявки')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Создатель мероприятия')),
            ],
            options={
                'verbose_name': 'Мероприятие',
                'verbose_name_plural': 'Мероприятия',
            },
        ),
        migrations.CreateModel(
            name='EventAdditionalIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue', models.TextField(blank=True, null=True, verbose_name='Вопрос')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additional_issues', to='events.event', verbose_name='Мероприятие')),
            ],
            options={
                'verbose_name': 'Дополнительные вопросы мероприятия',
                'verbose_name_plural': 'Дополнительные вопросы мероприятий',
            },
        ),
        migrations.CreateModel(
            name='MultiEventApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organizer_id', models.PositiveIntegerField(verbose_name='Идентификатор организатора')),
                ('is_approved', models.BooleanField(default=False, verbose_name='Одобрено')),
                ('participants_count', models.PositiveIntegerField(default=0, verbose_name='Количество участников')),
                ('emblem', models.TextField(blank=True, null=True, verbose_name='Путь к эмблеме')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания заявки')),
                ('central_headquarter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='multi_event_applications', to='headquarters.centralheadquarter', verbose_name='Центральный штаб')),
                ('detachment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='multi_event_applications', to='headquarters.detachment', verbose_name='Отряд')),
                ('district_headquarter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='multi_event_applications', to='headquarters.districtheadquarter', verbose_name='Окружной штаб')),
                ('educational_headquarter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='multi_event_applications', to='headquarters.educationalheadquarter', verbose_name='Образовательный штаб')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='multi_event_applications', to='events.event', verbose_name='Мероприятие')),
                ('local_headquarter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='multi_event_applications', to='headquarters.localheadquarter', verbose_name='Местный штаб')),
                ('regional_headquarter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='multi_event_applications', to='headquarters.regionalheadquarter', verbose_name='Региональный штаб')),
            ],
            options={
                'verbose_name': 'Заявка на участие в многоэтапном мероприятии',
                'verbose_name_plural': 'Заявки на участие в многоэтапном мероприятии',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='EventUserDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to=events.utils.document_path, verbose_name='Скан документа. Файл формата pdf, png, jpeg.')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_user_documents', to='events.event', verbose_name='Мероприятие')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_user_documents', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Скан документа участника мероприятия',
                'verbose_name_plural': 'Сканы документов участников мероприятий',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='EventTimeData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_duration_type', models.CharField(blank=True, choices=[('Однодневное', 'Однодневное'), ('Многодневное', 'Многодневное')], default='Однодневное', max_length=20, null=True, verbose_name='Продолжительность мероприятия')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Дата начала мероприятия')),
                ('start_time', models.TimeField(blank=True, null=True, verbose_name='Время начала мероприятия')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания мероприятия')),
                ('end_time', models.TimeField(blank=True, null=True, verbose_name='Время окончания мероприятия')),
                ('registration_end_date', models.DateField(blank=True, null=True, verbose_name='Дата окончания регистрации')),
                ('registration_end_time', models.TimeField(blank=True, null=True, verbose_name='Время окончания регистрации')),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='time_data', to='events.event', verbose_name='Мероприятие')),
            ],
            options={
                'verbose_name': 'Информация о времени мероприятия',
                'verbose_name_plural': 'Информация о времени мероприятий',
            },
        ),
        migrations.CreateModel(
            name='EventParticipants',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_participants', to='events.event', verbose_name='Мероприятие')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_participants', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Участник мероприятия',
                'verbose_name_plural': 'Участники мероприятий',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='EventOrganizationData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organizer_phone_number', models.CharField(blank=True, default='+7', max_length=30, null=True, verbose_name='Номер телефона')),
                ('organizer_email', models.EmailField(blank=True, max_length=250, null=True, verbose_name='Email')),
                ('organization', models.CharField(blank=True, max_length=250, null=True, verbose_name='Организация')),
                ('telegram', models.CharField(blank=True, max_length=50, null=True, verbose_name='Телеграмм')),
                ('is_contact_person', models.BooleanField(default=False, verbose_name='Сделать контактным лицом')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_data', to='events.event', verbose_name='Мероприятие')),
                ('organizer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь-организатор')),
            ],
            options={
                'verbose_name': 'Организатор',
                'verbose_name_plural': 'Организаторы мероприятий',
            },
        ),
        migrations.CreateModel(
            name='EventIssueAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.TextField(verbose_name='Ответ')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_answers', to='events.event', verbose_name='Мероприятие')),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='events.eventadditionalissue', verbose_name='Вопрос')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_answers', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Ответ на вопрос участника мероприятия',
                'verbose_name_plural': 'Ответы на вопросы участников мероприятий',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='EventDocumentData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passport', models.BooleanField(default=False, verbose_name='Паспорт')),
                ('snils', models.BooleanField(default=False, verbose_name='СНИЛС')),
                ('inn', models.BooleanField(default=False, verbose_name='ИНН')),
                ('work_book', models.BooleanField(default=False, verbose_name='Трудовая книжка')),
                ('military_document', models.BooleanField(default=False, verbose_name='Военный билет или приписное свидетельство')),
                ('consent_personal_data', models.BooleanField(default=False, verbose_name='Согласие на обработку персональных данных')),
                ('additional_info', models.TextField(blank=True, null=True, verbose_name='Расскажите, с какими документами необходимо просто ознакомиться, а какие скачать и заполнить')),
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='document_data', to='events.event', verbose_name='Мероприятие')),
            ],
            options={
                'verbose_name': 'Список необходимых документов для мероприятия',
                'verbose_name_plural': 'Список необходимых документов для мероприятий',
            },
        ),
        migrations.CreateModel(
            name='EventDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to=events.utils.document_path, verbose_name='Файл формата pdf, png, jpeg')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='events.event', verbose_name='Мероприятие')),
            ],
            options={
                'verbose_name': 'Документы мероприятия',
                'verbose_name_plural': 'Документы мероприятий',
            },
        ),
        migrations.CreateModel(
            name='EventApplications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания заявки')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_applications', to='events.event', verbose_name='Мероприятие')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_applications', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заявка на участие в мероприятии',
                'verbose_name_plural': 'Заявки на участие в мероприятиях',
                'ordering': ['-id'],
            },
        ),
        migrations.AddConstraint(
            model_name='multieventapplication',
            constraint=models.UniqueConstraint(fields=('event', 'central_headquarter'), name='unique_central_headquarter_application'),
        ),
        migrations.AddConstraint(
            model_name='multieventapplication',
            constraint=models.UniqueConstraint(fields=('event', 'district_headquarter'), name='unique_district_headquarter_application'),
        ),
        migrations.AddConstraint(
            model_name='multieventapplication',
            constraint=models.UniqueConstraint(fields=('event', 'regional_headquarter'), name='unique_regional_headquarter_application'),
        ),
        migrations.AddConstraint(
            model_name='multieventapplication',
            constraint=models.UniqueConstraint(fields=('event', 'local_headquarter'), name='unique_local_headquarter_application'),
        ),
        migrations.AddConstraint(
            model_name='multieventapplication',
            constraint=models.UniqueConstraint(fields=('event', 'educational_headquarter'), name='unique_educational_headquarter_application'),
        ),
        migrations.AddConstraint(
            model_name='multieventapplication',
            constraint=models.UniqueConstraint(fields=('event', 'detachment'), name='unique_detachment_application'),
        ),
        migrations.AddConstraint(
            model_name='eventtimedata',
            constraint=models.UniqueConstraint(fields=('event',), name='unique_event_time_data'),
        ),
        migrations.AddConstraint(
            model_name='eventparticipants',
            constraint=models.UniqueConstraint(fields=('event', 'user'), name='unique_event_participant'),
        ),
        migrations.AddConstraint(
            model_name='eventissueanswer',
            constraint=models.UniqueConstraint(fields=('event', 'user', 'issue'), name='unique_issue_answer'),
        ),
        migrations.AddConstraint(
            model_name='eventdocumentdata',
            constraint=models.UniqueConstraint(fields=('event',), name='unique_event_document_data'),
        ),
        migrations.AddConstraint(
            model_name='eventapplications',
            constraint=models.UniqueConstraint(fields=('event', 'user'), name='unique_event_application'),
        ),
    ]
